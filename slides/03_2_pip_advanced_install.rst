Working with packages
*********************

Specify version to be installed
===============================

- Exact version:  **==**
- Lower bound: **>, >=**
- Upper bound: **<, <=**

Get list of installed packages with their version
=================================================

.. code-block:: text

    > pip freeze
    flake8==2.6.2
    mccabe==0.5.3
    packaging==20.1
    pycodestyle==2.0.0
    pyflakes==1.2.3
    pyparsing==2.4.6

Install many packages with one command
======================================

Requirements file for **flake8**
--------------------------------

.. literalinclude:: flake8.pip
   :language: text
   :caption: requirements.pip


Installation
------------

.. code-block::

    > pip install -r slides/requirements.pip
    Collecting pyflakes<2.2.0,>=2.1.0 (from -r slides/requirements.pip (line 1))
    Collecting pycodestyle<2.6.0,>=2.5.0 (from -r slides/requirements.pip (line 2))
    Collecting mccabe<0.7.0,>=0.6.0 (from -r slides/requirements.pip (line 3))
    Installing collected packages: pyflakes, pycodestyle, mccabe
    Successfully installed mccabe-0.6.1 pycodestyle-2.5.0 pyflakes-2.1.1

..
  Пупи содежит информацию о версиях пакетов, этим можно пользоваться при установке библиотеке.
  можно указать явно версию которая вам нужно, а можно и интервал версий.

  Для просмотра версий установленных пакетов можно использовать команду pip freeze.
  Вывод этой команды можно использовать для создания файла с зависимостями вашего приложения.
  Это хорошая практика явно указывать версии библиотек с которыми работает ваша приложение.
  Некоторые несовместимости между версиями могут выдавать неожиданные результаты в процессе выполнения программы.
  Я выучил это через слоный путь, вечерний релиз затянулся на три часа,
  просто потому, что версия одной из библиотек была не зафиксирована, и ей обновление нарушило работу программы.

  Пип позволяет указывать сразу несколько программ через пробел.  Если у библиотек есть общие зависимости, то они будут скачаны один раз.
  Ну и не надо ждать пока одна команда закончится, чтобы ввести следующую.

  Следующий шаг в развитие этой техники создание файла с требованиями.  Все библиотеки выписываются в столбик и ставятся за раз.
  Такой файл удобно хранить в репозитории, им могут пользоваться как люди так и скрипты автоматизации.
  Это один из рекомендованный способ хранить список зависимостей. Второй рекомендованный это хранить зависимости прямо в setup.py, если у вас распространяемая библиотека.
  Для указания файла с требованиями используется аргумент -r.  Это аргумент можно использовать рекурсивно в самом файле. Это удобно когда нужно иметь разные наборы по установке инадо избежать дублирования.
  Например продукт состоит из разных сервисов, у каждого из которых свои требования, но на машине разработчика хочтестя поставить все стразу.

  Мы поговорили как пользоваться пакетами перейдем к созданию.
